"""
Migraci√≥n: Agregar tabla payment_methods

Este script agrega la tabla payment_methods a una base de datos existente
para almacenar m√©todos de pago habilitados/deshabilitados (Efectivo, D√©bito, Cr√©dito, Transferencia).

Uso:
    python migrate_payment_methods.py
"""

from database import SessionLocal, engine
from app.models.payment_method import PaymentMethod
from sqlalchemy import inspect
import sys


def table_exists(table_name):
    """Verificar si una tabla existe en la base de datos"""
    inspector = inspect(engine)
    return table_name in inspector.get_table_names()


def migrate_payment_methods():
    """Crear tabla payment_methods y agregar m√©todos por defecto"""

    print("=" * 60)
    print("Migraci√≥n: Agregar tabla payment_methods")
    print("=" * 60)

    # Verificar si la tabla ya existe
    if table_exists('payment_methods'):
        print("‚úì La tabla 'payment_methods' ya existe")

        # Verificar si hay datos
        db = SessionLocal()
        try:
            method_count = db.query(PaymentMethod).count()
            if method_count > 0:
                print(f"‚úì Ya existen {method_count} m√©todo(s) de pago")
                print("\n‚úÖ No se requiere migraci√≥n")
                return True
            else:
                print("‚ö† La tabla existe pero est√° vac√≠a")
        except Exception as e:
            print(f"‚ö† Error verificando datos: {e}")
        finally:
            db.close()
    else:
        print("‚äï Creando tabla 'payment_methods'...")

        # Crear solo la tabla payment_methods
        try:
            PaymentMethod.__table__.create(bind=engine, checkfirst=True)
            print("‚úì Tabla 'payment_methods' creada exitosamente")
        except Exception as e:
            print(f"‚ùå Error creando tabla: {e}")
            return False

    # Insertar m√©todos de pago por defecto
    print("\n‚äï Insertando m√©todos de pago por defecto...")
    db = SessionLocal()

    try:
        default_methods = [
            PaymentMethod(
                name="Efectivo",
                code="CASH",
                icon="üíµ",
                is_active=True,
                requires_change=True,
                description="Pago en efectivo"
            ),
            PaymentMethod(
                name="Tarjetas",
                code="CARD",
                icon="üí≥",
                is_active=True,
                requires_change=False,
                description="Pago con tarjetas (bancarizadas, no bancarizadas, etc.)"
            ),
            PaymentMethod(
                name="Transferencia",
                code="TRANSFER",
                icon="üè¶",
                is_active=True,
                requires_change=False,
                description="Transferencia bancaria"
            )
        ]

        for method in default_methods:
            db.add(method)

        db.commit()

        print(f"‚úì {len(default_methods)} m√©todos de pago insertados:")
        for i, method in enumerate(default_methods, 1):
            print(f"  {i}. {method.name} ({method.code}) - {'Habilitado' if method.is_active else 'Deshabilitado'}")

        print("\n" + "=" * 60)
        print("‚úÖ Migraci√≥n completada exitosamente")
        print("=" * 60)
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Los m√©todos de pago est√°n disponibles")
        print("2. Puedes habilitarlos/deshabilitarlos desde Settings ‚Üí Payment Methods")
        print("3. O usando la API: PUT /config/payment-methods/{id}")
        print("\nüí° Reinicia el frontend para que cargue la configuraci√≥n:")
        print("   docker-compose restart frontend")

        return True

    except Exception as e:
        print(f"\n‚ùå Error insertando m√©todos de pago: {e}")
        db.rollback()
        return False

    finally:
        db.close()


if __name__ == "__main__":
    print("\nüöÄ Iniciando migraci√≥n...\n")

    try:
        success = migrate_payment_methods()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
