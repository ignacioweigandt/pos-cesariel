name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests Before Deploy
    uses: ./.github/workflows/test-suite.yml
    secrets: inherit

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend, ecommerce]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service == 'frontend' && 'frontend/pos-cesariel' || matrix.service }}
        file: ./${{ matrix.service == 'frontend' && 'frontend/pos-cesariel' || matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be:
        # - Updating Kubernetes manifests
        # - Deploying to cloud provider
        # - Running deployment scripts
        
        # Example with docker-compose:
        # docker-compose -f docker-compose.staging.yml pull
        # docker-compose -f docker-compose.staging.yml up -d
    
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests to verify staging deployment
        # curl -f https://staging.example.com/health
        # npm run test:smoke

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This should include:
        # - Database migrations
        # - Blue-green deployment
        # - Health checks
        # - Rollback plan
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add comprehensive health checks
        # curl -f https://api.example.com/health
        # npm run test:production-health
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          - üöÄ New features and improvements
          - üêõ Bug fixes
          - üìö Documentation updates
          
          ## Deployment Info
          
          - **Backend**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}`
          - **POS Frontend**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}`
          - **E-commerce**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ecommerce:${{ github.ref_name }}`
          
          ## Testing
          
          All tests passed before deployment:
          - ‚úÖ Backend tests
          - ‚úÖ Frontend tests
          - ‚úÖ Integration tests
          - ‚úÖ E2E tests
          - ‚úÖ Performance tests
        draft: false
        prerelease: false

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ needs.deploy-production.result }}';
          const emoji = status === 'success' ? 'üöÄ' : '‚ùå';
          const message = status === 'success' 
            ? `${emoji} Production deployment successful!`
            : `${emoji} Production deployment failed!`;
          
          console.log(message);
          
          // Add notification to Slack, Discord, or other platforms
          // Example with webhook:
          // await fetch(process.env.WEBHOOK_URL, {
          //   method: 'POST',
          //   headers: { 'Content-Type': 'application/json' },
          //   body: JSON.stringify({ text: message })
          // });

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Emergency rollback initiated..."
        # Add rollback commands here
        # This could include:
        # - Rolling back to previous container versions
        # - Database rollback scripts
        # - Reverting configuration changes
        
        echo "Rollback completed"
    
    - name: Notify rollback
      uses: actions/github-script@v6
      with:
        script: |
          console.log('üîÑ Emergency rollback executed due to deployment failure');
          
          // Notify team of rollback
          // Add notification logic here