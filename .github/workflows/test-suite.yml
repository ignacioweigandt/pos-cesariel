name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Database configuration for testing
  DB_HOST: localhost
  DB_PORT: 5432
  DB_NAME: pos_cesariel_test
  DB_USER: postgres
  DB_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pos_cesariel_test
  
  # API configuration
  NEXT_PUBLIC_API_URL: http://localhost:8000
  
  # Cloudinary test configuration (use test credentials or mocks)
  CLOUDINARY_CLOUD_NAME: test-cloud
  CLOUDINARY_API_KEY: test-key
  CLOUDINARY_API_SECRET: test-secret

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pos_cesariel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        python -c "from database import init_db; init_db()"
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        pytest -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .
    
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Run backend linting
      working-directory: ./backend
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .

  frontend-pos-tests:
    name: POS Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/pos-cesariel/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend/pos-cesariel
      run: npm ci
    
    - name: Run POS frontend tests
      working-directory: ./frontend/pos-cesariel
      run: |
        npm run test:coverage
    
    - name: Upload POS frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/pos-cesariel/coverage/lcov.info
        flags: frontend-pos
        name: frontend-pos-coverage
    
    - name: Run POS frontend linting
      working-directory: ./frontend/pos-cesariel
      run: npm run lint
    
    - name: Build POS frontend
      working-directory: ./frontend/pos-cesariel
      run: npm run build

  frontend-ecommerce-tests:
    name: E-commerce Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ecommerce/package-lock.json
    
    - name: Install dependencies
      working-directory: ./ecommerce
      run: npm ci --legacy-peer-deps
    
    - name: Run E-commerce frontend tests
      working-directory: ./ecommerce
      run: |
        npm run test:coverage
    
    - name: Upload E-commerce frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./ecommerce/coverage/lcov.info
        flags: frontend-ecommerce
        name: frontend-ecommerce-coverage
    
    - name: Run E-commerce frontend linting
      working-directory: ./ecommerce
      run: npm run lint
    
    - name: Build E-commerce frontend
      working-directory: ./ecommerce
      run: npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-pos-tests, frontend-ecommerce-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pos_cesariel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/pos-cesariel/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend/pos-cesariel
      run: npm ci
    
    - name: Install E-commerce dependencies
      working-directory: ./ecommerce
      run: npm ci --legacy-peer-deps
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -c "from database import init_db; init_db()"
        python main.py &
        sleep 10
      env:
        PYTHONPATH: .
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        pytest tests/integration/ -v --tb=short -m integration
      env:
        PYTHONPATH: .

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pos_cesariel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/pos-cesariel/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install POS frontend dependencies
      working-directory: ./frontend/pos-cesariel
      run: npm ci
    
    - name: Install E-commerce dependencies
      working-directory: ./ecommerce
      run: npm ci --legacy-peer-deps
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python -c "from database import init_db; init_db()"
        python -c "from init_data import main; main()"
        python main.py &
        sleep 15
      env:
        PYTHONPATH: .
    
    - name: Build and start POS frontend
      working-directory: ./frontend/pos-cesariel
      run: |
        npm run build
        npm start &
        sleep 10
    
    - name: Build and start E-commerce frontend
      working-directory: ./ecommerce
      run: |
        npm run build
        npm start &
        sleep 10
    
    - name: Wait for services
      run: |
        echo "Waiting for backend..."
        until curl -f http://localhost:8000/health; do sleep 5; done
        
        echo "Waiting for POS frontend..."
        until curl -f http://localhost:3000; do sleep 5; done
        
        echo "Waiting for E-commerce frontend..."
        until curl -f http://localhost:3001; do sleep 5; done
    
    - name: Run POS E2E tests
      working-directory: ./frontend/pos-cesariel
      run: npm run test:e2e
    
    - name: Run E-commerce E2E tests
      working-directory: ./ecommerce
      run: npm run test:e2e
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: |
          frontend/pos-cesariel/cypress/screenshots/
          frontend/pos-cesariel/cypress/videos/
          ecommerce/cypress/screenshots/
          ecommerce/cypress/videos/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pos_cesariel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/pos-cesariel/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend/pos-cesariel && npm ci
        cd ../../ecommerce && npm ci --legacy-peer-deps
    
    - name: Start services
      run: |
        cd backend
        python -c "from database import init_db; init_db()"
        python -c "from init_data import main; main()"
        python main.py &
        sleep 15
        
        cd ../frontend/pos-cesariel
        npm run build && npm start &
        sleep 10
        
        cd ../../ecommerce
        npm run build && npm start &
        sleep 10
      env:
        PYTHONPATH: backend
    
    - name: Run Lighthouse performance tests
      working-directory: ./frontend/pos-cesariel
      run: npm run test:lighthouse
    
    - name: Run load tests
      working-directory: ./frontend/pos-cesariel
      run: npm run test:load
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          frontend/pos-cesariel/.lighthouseci/
          frontend/pos-cesariel/artillery-report.html

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit (POS)
      working-directory: ./frontend/pos-cesariel
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run npm audit (E-commerce)
      working-directory: ./ecommerce
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run safety check (Python)
      working-directory: ./backend
      run: |
        pip install safety
        safety check
      continue-on-error: true

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-pos-tests, frontend-ecommerce-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml build
    
    - name: Start preview environment
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Test preview environment
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:3000
        curl -f http://localhost:3001
    
    - name: Comment PR with preview link
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Preview environment deployed successfully!\n\n' +
                  '- Backend: http://localhost:8000\n' +
                  '- POS Admin: http://localhost:3000\n' +
                  '- E-commerce: http://localhost:3001\n\n' +
                  'All tests passed ✅'
          })

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-pos-tests, frontend-ecommerce-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Test Summary
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            'Backend Tests': '${{ needs.backend-tests.result }}',
            'POS Frontend Tests': '${{ needs.frontend-pos-tests.result }}',
            'E-commerce Frontend Tests': '${{ needs.frontend-ecommerce-tests.result }}',
            'Integration Tests': '${{ needs.integration-tests.result }}',
            'E2E Tests': '${{ needs.e2e-tests.result }}'
          };
          
          let summary = '## 🧪 Test Results Summary\n\n';
          
          for (const [test, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
            summary += `${emoji} ${test}: ${result}\n`;
          }
          
          const allPassed = Object.values(results).every(result => result === 'success' || result === 'skipped');
          
          if (allPassed) {
            summary += '\n🎉 All tests passed! Ready for deployment.';
          } else {
            summary += '\n⚠️ Some tests failed. Please review the results.';
          }
          
          console.log(summary);
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }